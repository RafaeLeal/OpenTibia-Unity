version: 2
references:
  docker_image: &docker_image
    docker:
    - image: gableroux/unity3d:2019.1.8f1-mac-add-2017-4-29f1-2018-4-3f1-2019-1-8f1 
  setup_unity_license_env_var: &setup_unity_license_env_var
    working_directory: ~/project/OpenTibia
    command: |
      openssl version
      pwd
      ls -lah
      openssl aes-256-cbc -md md5 -d -in ./ci/Unity_v2019.x.ulf.encrypted -out Unity_v2019.x.ulf -k $OPENTIBIA_CRYPT_KEY
      export UNITY_LICENSE_CONTENT=`cat Unity_v2019.x.ulf`
      rm Unity_v2019.x.ulf
jobs:
  # test_editmode:
    # <<: *docker_image
    # steps:
    # TODO: Add git to unity image so this is not required anymore
    # this will prevent following error on 'checkout' step:
    # Either git or ssh (required by git to clone through SSH) is not installed in the image. Falling back to CircleCI's native git client but the behavior may be different from official git. If this is an issue, please use an image that has official git and ssh installed.
  #   - run:
  #       command: apt-get update && apt-get install -y git && git --version
  #   - checkout
  #   - run:
  #       <<: *setup_unity_license_env_var
  #   - run:
  #       environment:
  #         TEST_PLATFORM: editmode
  #       command: "./ci/test.sh"
  #   - store_artifacts:
  #       path: "$(pwd)/$TEST_PLATFORM-results.xml"
  #       destination: "$TEST_PLATFORM-results.xml"
  # test_playmode:
  #   <<: *docker_image
  #   steps:
  #   - run:
  #       command: apt-get update && apt-get install -y git && git --version
  #   - checkout
  #   - run:
  #       <<: *setup_unity_license_env_var
  #   - run:
  #       environment:
  #         TEST_PLATFORM: playmode
  #       command: "./ci/test.sh"
  #   - store_artifacts:
  #       path: "$(pwd)/$TEST_PLATFORM-results.xml"
  #       destination: "$TEST_PLATFORM-results.xml"
  # build_StandaloneLinux64:
  #   <<: *docker_image
  #   steps:
    # - run:
    #     command: apt-get update && apt-get install -y git && git --version
    # - checkout
    # - run:
    #     <<: *setup_unity_license_env_var
    # - run:
    #     environment:
    #       BUILD_TARGET: StandaloneLinux64
    #     command: "./ci/build.sh"
    # - store_artifacts:
    #     path: "./Builds/"
  build_StandaloneOSX:
    <<: *docker_image
    steps:
    # - run:
    #     command: apt-get update && apt-get install -y git && git --version
    - checkout
    # - run:
    #     name: setup-unity-license
    #     <<: *setup_unity_license_env_var
    - run:
        working_directory: ~/project/OpenTibia
        environment:
          BUILD_NAME: OpenTibia-Unity-RafaeLeal
          BUILD_TARGET: StandaloneOSX
        command: "./ci/build.sh"
    - store_artifacts:
        path: "~/project/OpenTibia/Builds/"
workflows:
  version: 2
  test_and_build:
    jobs:
    # - test_editmode
    # - test_playmode
    - build_StandaloneOSX:
        context: OpenTibia
  # build:
# following is untested, but deploying to github-pages from CircleCI should look like this:
#  deploy_pages:
#    machine:
#      enabled: true
#    steps:
#    - run:
#        name: Deploy github-pages
#        environment:
#        - SOURCE_BRANCH: master
#        - TARGET_BRANCH: gh-pages
#        command: |
#          if [ $CIRCLE_BRANCH == $SOURCE_BRANCH ]; then
#            git config --global user.email $GH_EMAIL
#            git config --global user.name $GH_NAME
#
#            git clone $CIRCLE_REPOSITORY_URL out
#
#            cd out
#            git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH
#            git rm -rf .
#            cd ..
#
#            cp -a ./Builds/ out/.
#
#            #mkdir -p out/.circleci && cp -a .circleci/. out/.circleci/.
#            cd out
#
#            git add -A
#            git commit -m "Automated deployment to GitHub Pages: ${CIRCLE_SHA1}" --allow-empty
#
#            git push origin $TARGET_BRANCH
#          fi
#workflows:
#  version: 2
#  test_and_build:
#    jobs:
#    - test
#    - build
##TODO: prevent build on gh-pages branch in workflows
#filter:
#  branches:
#    ignore:
#    - gh-pages

## example if you'd like to create builds only on master
#    - build:
#        filters:
#          branches:
#            only:
#            - master
## example for deploying github pages
#    - deploy_pages:
#        requires:
#        - test
#        - build
#        filters:
#          branches:
#            only:
#            - master